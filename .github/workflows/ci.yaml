# .github/workflows/ci-cd.yml
name: CI ‚Üí Build & Push ‚Üí Deploy

# –¢—Ä–∏–≥–µ—Ä–∏–º–æ –Ω–∞ dev —Ç–∞ feature-ci-test
on:
  push:
    branches: [ dev, feature/ci-test ]
  pull_request:
    branches: [ dev ]

env:
  IMAGE_REGISTRY: docker.io
  IMAGE_REPO: ${{ secrets.DOCKER_USERNAME }}/project2025

jobs:

  lint:
    name: üîç Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # ESLint
      - name: Run ESLint
        run: npm install && npm run lint
        working-directory: .

      # Prettier check
      - name: Check Prettier formatting
        run: npm install && npm run format:check
        working-directory: .

  build-and-push:
    name: üì¶ Build & Push Images
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Docker Hub login
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # –°–µ—Ä–≤–µ—Ä-–æ–±—Ä–∞–∑
      - name: Build & push server image
        uses: docker/build-push-action@v4
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPO }}-server:latest
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPO }}-server:${{ github.sha }}

      # –ö–ª—ñ—î–Ω—Ç-–æ–±—Ä–∞–∑
      - name: Build & push client image
        uses: docker/build-push-action@v4
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPO }}-client:latest
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_REPO }}-client:${{ github.sha }}

  deploy:
    name: üöÄ Deploy on EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/dev') || startsWith(github.ref, 'refs/heads/feature/ci-test')
    steps:
      - name: SSH & Deploy
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd /home/ubuntu/Project2025

            echo "Pulling new images"
            docker-compose pull

            echo "Recreating containers"
            docker-compose down --remove-orphans
            docker-compose up -d

            echo "Prune unused images"
            docker image prune -f
